// Copyright 2017 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package sort2

type genericSlice(type T) struct {
    slice []T
    less func(i, j int) bool
}

func (s genericSlice(T)) Less(i, j int) bool { return s.less(i, j) }
func (s genericSlice(T)) Swap(i, j int) { s.slice[i], s.slice[j] = s.slice[j], s.slice[i] }

// Slice sorts the provided slice given the provided less function.
//
// The sort is not guaranteed to be stable. For a stable sort, use
// SliceStable.
func Slice(type T)(slice []T, less func(i, j int) bool) {
	length := len(slice)
	quickSort(genericSlice(T){slice, less}, 0, length, maxDepth(T)(length))
}

// SliceStable sorts the provided slice given the provided less
// function while keeping the original order of equal elements.
func SliceStable(type T)(slice []T, less func(i, j int) bool) {
	stable(genericSlice(T){slice, less}, len(slice))
}

// SliceIsSorted tests whether a slice is sorted.
func SliceIsSorted(type T)(slice []T, less func(i, j int) bool) bool {
	n := len(slice)
	for i := n - 1; i > 0; i-- {
		if less(i, i-1) {
			return false
		}
	}
	return true
}

type Sortable(type T) interface {
	// Less reports whether the element should sort before the element e.
    Less(e T) bool
}

type sortableSlice(type T Sortable) []T

func (s sortableSlice(T)) Less(i, j int) bool { return s[i].Less(s[j]) }
func (s sortableSlice(T)) Swap(i, j int) { s[i], s[j] = s[j], s[i] }

// SortableSlice sorts the provided slice with Sortable elements given the
// provided less function.
//
// The sort is not guaranteed to be stable. For a stable sort, use
// SortableSliceStable.
func SortableSlice(type T Sortable)(slice []T) {
	length := len(slice)
	quickSort(sortableSlice(T)(slice), 0, length, maxDepth(T)(length))
}

// SortableSliceStable sorts the provided slice with Sortable elements
// given the provided less function while keeping the original order of
// equal elements.
func SortableSliceStable(type T Sortable)(slice []T) {
	stable(sortableSlice(T)(slice), len(slice))
}

// SortableSliceIsSorted tests whether a slice with Sortable elements is
// sorted.
func SortableSliceIsSorted(type T Sortable)(slice []T) bool {
	n := len(slice)
	for i := n - 1; i > 0; i-- {
		if slice[i].Less(slice[i-1]) {
			return false
		}
	}
	return true
}