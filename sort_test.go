// Code generated by go2go; DO NOT EDIT.


//line sort_test.go2:5
package sort2

//line sort_test.go2:5
import (
//line sort_test.go2:5
 "fmt"
//line sort_test.go2:5
 "math"
//line sort_test.go2:5
 "math/rand"
//line sort_test.go2:5
 "runtime"
//line sort_test.go2:5
 "strconv"
//line sort_test.go2:5
 "testing"
//line sort_test.go2:5
)

//line sort_test.go2:15
var ints = [...]int{74, 59, 238, -784, 9845, 959, 905, 0, 0, 42, 7586, -5467984, 7586}
var float64s = [...]float64{74.3, 59.0, math.Inf(1), 238.2, -784.0, 2.3, math.NaN(), math.NaN(), math.Inf(-1), 9845.768, -959.7485, 905, 7.8, 7.8}
var strings = [...]string{"", "Hello", "foo", "bar", "foo", "f00", "%*&^*&^&", "***"}

func TestSortIntSlice(t *testing.T) {
				data := ints
				a := IntSlice(data[0:])
//line sort_test.go2:21
 instantiate୦୦Sort୦sort2୮aIntSlice(a)
//line sort_test.go2:23
 if !instantiate୦୦IsSorted୦sort2୮aIntSlice(a) {
		t.Errorf("sorted %v", ints)
		t.Errorf("   got %v", data)
	}
}

func TestSortFloat64Slice(t *testing.T) {
				data := float64s
				a := Float64Slice(data[0:])
//line sort_test.go2:31
 instantiate୦୦Sort୦sort2୮aFloat64Slice(a)
//line sort_test.go2:33
 if !instantiate୦୦IsSorted୦sort2୮aFloat64Slice(a) {
		t.Errorf("sorted %v", float64s)
		t.Errorf("   got %v", data)
	}
}

func TestSortStringSlice(t *testing.T) {
				data := strings
				a := StringSlice(data[0:])
//line sort_test.go2:41
 instantiate୦୦Sort୦sort2୮aStringSlice(a)
//line sort_test.go2:43
 if !instantiate୦୦IsSorted୦sort2୮aStringSlice(a) {
		t.Errorf("sorted %v", strings)
		t.Errorf("   got %v", data)
	}
}

func TestInts(t *testing.T) {
	data := ints
	Ints(data[0:])
	if !IntsAreSorted(data[0:]) {
		t.Errorf("sorted %v", ints)
		t.Errorf("   got %v", data)
	}
}

func TestFloat64s(t *testing.T) {
	data := float64s
	Float64s(data[0:])
	if !Float64sAreSorted(data[0:]) {
		t.Errorf("sorted %v", float64s)
		t.Errorf("   got %v", data)
	}
}

func TestStrings(t *testing.T) {
	data := strings
	Strings(data[0:])
	if !StringsAreSorted(data[0:]) {
		t.Errorf("sorted %v", strings)
		t.Errorf("   got %v", data)
	}
}

func TestSlice(t *testing.T) {
				data := strings
//line sort_test.go2:77
 instantiate୦୦Slice୦string(data[:], func(i, j int) bool {
//line sort_test.go2:79
  return data[i] < data[j]
	})
	if !instantiate୦୦SliceIsSorted୦string(data[:], func(i, j int) bool { return data[i] < data[j] }) {
		t.Errorf("sorted %v", strings)
		t.Errorf("   got %v", data)
	}
}

func TestSortLarge_Random(t *testing.T) {
	n := 1000000
	if testing.Short() {
		n /= 100
	}
	data := make([]int, n)
	for i := 0; i < len(data); i++ {
		data[i] = rand.Intn(100)
	}
	if IntsAreSorted(data) {
		t.Fatalf("terrible rand.rand")
	}
	Ints(data)
	if !IntsAreSorted(data) {
		t.Errorf("sort didn't sort - 1M ints")
	}
}

func TestReverseSortIntSlice(t *testing.T) {
				data := ints
				data1 := ints
				a := IntSlice(data[0:])
//line sort_test.go2:108
 instantiate୦୦Sort୦sort2୮aIntSlice(a)
//line sort_test.go2:110
 r := IntSlice(data1[0:])
//line sort_test.go2:110
 instantiate୦୦Sort୦sort2୮aInterface(instantiate୦୦Reverse୦sort2୮aIntSlice(r))
//line sort_test.go2:112
 for i := 0; i < len(data); i++ {
		if a[i] != r[len(data)-1-i] {
			t.Errorf("reverse sort didn't sort")
		}
		if i > len(data)/2 {
			break
		}
	}
}

type nonDeterministicTestingData struct {
	r *rand.Rand
}

func (t *nonDeterministicTestingData) Len() int {
	return 500
}
func (t *nonDeterministicTestingData) Less(i, j int) bool {
	if i < 0 || j < 0 || i >= t.Len() || j >= t.Len() {
		panic("nondeterministic comparison out of bounds")
	}
	return t.r.Float32() < 0.5
}
func (t *nonDeterministicTestingData) Swap(i, j int) {
	if i < 0 || j < 0 || i >= t.Len() || j >= t.Len() {
		panic("nondeterministic comparison out of bounds")
	}
}

func TestNonDeterministicComparison(t *testing.T) {

//line sort_test.go2:144
 defer func() {
		if r := recover(); r != nil {
			t.Error(r)
		}
	}()

	td := &nonDeterministicTestingData{
		r: rand.New(rand.NewSource(0)),
	}

	for i := 0; i < 10; i++ {
//line sort_test.go2:154
  instantiate୦୦Sort୦୮1sort2୮anonDeterministicTestingData(td)
//line sort_test.go2:156
 }
}

func BenchmarkSortString1K(b *testing.B) {
	b.StopTimer()
	unsorted := make([]string, 1<<10)
	for i := range unsorted {
		unsorted[i] = strconv.Itoa(i ^ 0x2cc)
	}
	data := make([]string, len(unsorted))

	for i := 0; i < b.N; i++ {
		copy(data, unsorted)
		b.StartTimer()
		Strings(data)
		b.StopTimer()
	}
}

func BenchmarkSortString1K_Slice(b *testing.B) {
	b.StopTimer()
	unsorted := make([]string, 1<<10)
	for i := range unsorted {
		unsorted[i] = strconv.Itoa(i ^ 0x2cc)
	}
	data := make([]string, len(unsorted))

	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:185
  instantiate୦୦Slice୦string(data, func(i, j int) bool { return data[i] < data[j] })
//line sort_test.go2:187
  b.StopTimer()
	}
}

type sortableString string

func (x sortableString) Less(y sortableString) bool { return x < y }

func BenchmarkSortString1K_SortableSlice(b *testing.B) {
	b.StopTimer()
	unsorted := make([]sortableString, 1<<10)
	for i := range unsorted {
		unsorted[i] = sortableString(strconv.Itoa(i ^ 0x2cc))
	}
	data := make([]sortableString, len(unsorted))

	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:205
  instantiate୦୦SortableSlice୦sort2୮asortableString(data)
//line sort_test.go2:207
  b.StopTimer()
	}
}

func BenchmarkStableString1K(b *testing.B) {
	b.StopTimer()
	unsorted := make([]string, 1<<10)
	for i := range unsorted {
		unsorted[i] = strconv.Itoa(i ^ 0x2cc)
	}
	data := make([]string, len(unsorted))

	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:221
  instantiate୦୦Stable୦sort2୮aStringSlice(StringSlice(data))
//line sort_test.go2:223
  b.StopTimer()
	}
}

func BenchmarkSortInt1K(b *testing.B) {
	b.StopTimer()
	for i := 0; i < b.N; i++ {
		data := make([]int, 1<<10)
		for i := 0; i < len(data); i++ {
			data[i] = i ^ 0x2cc
		}
		b.StartTimer()
		Ints(data)
		b.StopTimer()
	}
}

func BenchmarkStableInt1K(b *testing.B) {
	b.StopTimer()
	unsorted := make([]int, 1<<10)
	for i := range unsorted {
		unsorted[i] = i ^ 0x2cc
	}
	data := make([]int, len(unsorted))
	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:249
  instantiate୦୦Stable୦sort2୮aIntSlice(IntSlice(data))
//line sort_test.go2:251
  b.StopTimer()
	}
}

func BenchmarkStableInt1K_Slice(b *testing.B) {
	b.StopTimer()
	unsorted := make([]int, 1<<10)
	for i := range unsorted {
		unsorted[i] = i ^ 0x2cc
	}
	data := make([]int, len(unsorted))
	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:264
  instantiate୦୦SliceStable୦int(data, func(i, j int) bool { return data[i] < data[j] })
//line sort_test.go2:266
  b.StopTimer()
	}
}

type sortableInt int

func (x sortableInt) Less(y sortableInt) bool { return x < y }

func BenchmarkStableInt1K_SortableSlice(b *testing.B) {
	b.StopTimer()
	unsorted := make([]sortableInt, 1<<10)
	for i := range unsorted {
		unsorted[i] = sortableInt(i ^ 0x2cc)
	}
	data := make([]sortableInt, len(unsorted))
	for i := 0; i < b.N; i++ {
					copy(data, unsorted)
					b.StartTimer()
//line sort_test.go2:283
  instantiate୦୦SortableSliceStable୦sort2୮asortableInt(data)
//line sort_test.go2:285
  b.StopTimer()
	}
}

func BenchmarkSortInt64K(b *testing.B) {
	b.StopTimer()
	for i := 0; i < b.N; i++ {
		data := make([]int, 1<<16)
		for i := 0; i < len(data); i++ {
			data[i] = i ^ 0xcccc
		}
		b.StartTimer()
		Ints(data)
		b.StopTimer()
	}
}

func BenchmarkSortInt64K_Slice(b *testing.B) {
	b.StopTimer()
	for i := 0; i < b.N; i++ {
		data := make([]int, 1<<16)
		for i := 0; i < len(data); i++ {
			data[i] = i ^ 0xcccc
		}
					b.StartTimer()
//line sort_test.go2:309
  instantiate୦୦Slice୦int(data, func(i, j int) bool { return data[i] < data[j] })
//line sort_test.go2:311
  b.StopTimer()
	}
}

func BenchmarkSortInt64K_SortableSlice(b *testing.B) {
	b.StopTimer()
	for i := 0; i < b.N; i++ {
		data := make([]sortableInt, 1<<16)
		for i := 0; i < len(data); i++ {
			data[i] = sortableInt(i ^ 0xcccc)
		}
					b.StartTimer()
//line sort_test.go2:322
  instantiate୦୦SortableSlice୦sort2୮asortableInt(data)
//line sort_test.go2:324
  b.StopTimer()
	}
}

func BenchmarkStableInt64K(b *testing.B) {
	b.StopTimer()
	for i := 0; i < b.N; i++ {
		data := make([]int, 1<<16)
		for i := 0; i < len(data); i++ {
			data[i] = i ^ 0xcccc
		}
					b.StartTimer()
//line sort_test.go2:335
  instantiate୦୦Stable୦sort2୮aIntSlice(IntSlice(data))
//line sort_test.go2:337
  b.StopTimer()
	}
}

const (
	_Sawtooth = iota
	_Rand
	_Stagger
	_Plateau
	_Shuffle
	_NDist
)

const (
	_Copy = iota
	_Reverse
	_ReverseFirstHalf
	_ReverseSecondHalf
	_Sorted
	_Dither
	_NMode
)

type testingData struct {
	desc        string
	t           *testing.T
	data        []int
	maxswap     int
	ncmp, nswap int
}

func (d *testingData) Len() int { return len(d.data) }
func (d *testingData) Less(i, j int) bool {
	d.ncmp++
	return d.data[i] < d.data[j]
}
func (d *testingData) Swap(i, j int) {
	if d.nswap >= d.maxswap {
		d.t.Fatalf("%s: used %d swaps sorting slice of %d", d.desc, d.nswap, len(d.data))
	}
	d.nswap++
	d.data[i], d.data[j] = d.data[j], d.data[i]
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func lg(n int) int {
	i := 0
	for 1<<uint(i) < n {
		i++
	}
	return i
}

func testBentleyMcIlroy(t *testing.T, sort func(*testingData), maxswap func(int) int) {
	sizes := []int{100, 1023, 1024, 1025}
	if testing.Short() {
		sizes = []int{100, 127, 128, 129}
	}
	dists := []string{"sawtooth", "rand", "stagger", "plateau", "shuffle"}
	modes := []string{"copy", "reverse", "reverse1", "reverse2", "sort", "dither"}
	var tmp1, tmp2 [1025]int
	for _, n := range sizes {
		for m := 1; m < 2*n; m *= 2 {
			for dist := 0; dist < _NDist; dist++ {
				j := 0
				k := 1
				data := tmp1[0:n]
				for i := 0; i < n; i++ {
					switch dist {
					case _Sawtooth:
						data[i] = i % m
					case _Rand:
						data[i] = rand.Intn(m)
					case _Stagger:
						data[i] = (i*m + i) % n
					case _Plateau:
						data[i] = min(i, m)
					case _Shuffle:
						if rand.Intn(m) != 0 {
							j += 2
							data[i] = j
						} else {
							k += 2
							data[i] = k
						}
					}
				}

				mdata := tmp2[0:n]
				for mode := 0; mode < _NMode; mode++ {
					switch mode {
					case _Copy:
						for i := 0; i < n; i++ {
							mdata[i] = data[i]
						}
					case _Reverse:
						for i := 0; i < n; i++ {
							mdata[i] = data[n-i-1]
						}
					case _ReverseFirstHalf:
						for i := 0; i < n/2; i++ {
							mdata[i] = data[n/2-i-1]
						}
						for i := n / 2; i < n; i++ {
							mdata[i] = data[i]
						}
					case _ReverseSecondHalf:
						for i := 0; i < n/2; i++ {
							mdata[i] = data[i]
						}
						for i := n / 2; i < n; i++ {
							mdata[i] = data[n-(i-n/2)-1]
						}
					case _Sorted:
						for i := 0; i < n; i++ {
							mdata[i] = data[i]
						}

//line sort_test.go2:462
      Ints(mdata)
					case _Dither:
						for i := 0; i < n; i++ {
							mdata[i] = data[i] + i%5
						}
					}

								desc := fmt.Sprintf("n=%d m=%d dist=%s mode=%s", n, m, dists[dist], modes[mode])
								d := &testingData{desc: desc, t: t, data: mdata[0:n], maxswap: maxswap(n)}
								sort(d)

//line sort_test.go2:483
     if !IntsAreSorted(mdata) {
						t.Fatalf("%s: ints not sorted\n\t%v", desc, mdata)
					}
				}
			}
		}
	}
}

func TestSortBM(t *testing.T) {
	testBentleyMcIlroy(t, instantiate୦୦Sort୦୮1sort2୮atestingData, func(n int) int { return n * lg(n) * 12 / 10 })
}

func TestHeapsortBM(t *testing.T) {
	testBentleyMcIlroy(t, instantiate୦୦Heapsort୦୮1sort2୮atestingData, func(n int) int { return n * lg(n) * 12 / 10 })
}

func TestStableBM(t *testing.T) {
	testBentleyMcIlroy(t, instantiate୦୦Stable୦୮1sort2୮atestingData, func(n int) int { return n * lg(n) * lg(n) / 3 })
}

//line sort_test.go2:506
type adversaryTestingData struct {
	t         *testing.T
	data      []int
	maxcmp    int
	ncmp      int
	nsolid    int
	candidate int
	gas       int
}

func (d *adversaryTestingData) Len() int { return len(d.data) }

func (d *adversaryTestingData) Less(i, j int) bool {
	if d.ncmp >= d.maxcmp {
		d.t.Fatalf("used %d comparisons sorting adversary data with size %d", d.ncmp, len(d.data))
	}
	d.ncmp++

	if d.data[i] == d.gas && d.data[j] == d.gas {
		if i == d.candidate {

			d.data[i] = d.nsolid
			d.nsolid++
		} else {

			d.data[j] = d.nsolid
			d.nsolid++
		}
	}

	if d.data[i] == d.gas {
		d.candidate = i
	} else if d.data[j] == d.gas {
		d.candidate = j
	}

	return d.data[i] < d.data[j]
}

func (d *adversaryTestingData) Swap(i, j int) {
	d.data[i], d.data[j] = d.data[j], d.data[i]
}

func newAdversaryTestingData(t *testing.T, size int, maxcmp int) *adversaryTestingData {
	gas := size - 1
	data := make([]int, size)
	for i := 0; i < size; i++ {
		data[i] = gas
	}
	return &adversaryTestingData{t: t, data: data, maxcmp: maxcmp, gas: gas}
}

func TestAdversary(t *testing.T) {
				const size = 10000
				maxcmp := size * lg(size) * 4
				d := newAdversaryTestingData(t, size, maxcmp)
//line sort_test.go2:561
 instantiate୦୦Sort୦୮1sort2୮aadversaryTestingData(d)

//line sort_test.go2:564
 for i, v := range d.data {
		if v != i {
			t.Fatalf("adversary data not fully sorted")
		}
	}
}

func TestStableInts(t *testing.T) {
				data := ints
//line sort_test.go2:572
 instantiate୦୦Stable୦sort2୮aIntSlice(IntSlice(data[0:]))
//line sort_test.go2:574
 if !IntsAreSorted(data[0:]) {
		t.Errorf("nsorted %v\n   got %v", ints, data)
	}
}

type intPairs []struct {
	a, b int
}

//line sort_test.go2:584
func (d intPairs) Len() int { return len(d) }
func (d intPairs) Less(i, j int) bool                { return d[i].a < d[j].a }
func (d intPairs) Swap(i, j int)                     { d[i], d[j] = d[j], d[i] }

//line sort_test.go2:589
func (d intPairs) initB() {
	for i := range d {
		d[i].b = i
	}
}

//line sort_test.go2:596
func (d intPairs) inOrder() bool {
	lastA, lastB := -1, 0
	for i := 0; i < len(d); i++ {
		if lastA != d[i].a {
			lastA = d[i].a
			lastB = d[i].b
			continue
		}
		if d[i].b <= lastB {
			return false
		}
		lastB = d[i].b
	}
	return true
}

func TestStability(t *testing.T) {
	n, m := 100000, 1000
	if testing.Short() {
		n, m = 1000, 100
	}
				data := make(intPairs, n)

//line sort_test.go2:620
 for i := 0; i < len(data); i++ {
		data[i].a = rand.Intn(m)
	}
	if instantiate୦୦IsSorted୦sort2୮aintPairs(data) {
		t.Fatalf("terrible rand.rand")
	}
				data.initB()
//line sort_test.go2:626
 instantiate୦୦Stable୦sort2୮aintPairs(data)
//line sort_test.go2:628
 if !instantiate୦୦IsSorted୦sort2୮aintPairs(data) {
		t.Errorf("Stable didn't sort %d ints", n)
	}
	if !data.inOrder() {
		t.Errorf("Stable wasn't stable on %d ints", n)
	}

//line sort_test.go2:636
 data.initB()
//line sort_test.go2:636
 instantiate୦୦Stable୦sort2୮aintPairs(data)
//line sort_test.go2:638
 if !instantiate୦୦IsSorted୦sort2୮aintPairs(data) {
		t.Errorf("Stable shuffled sorted %d ints (order)", n)
	}
	if !data.inOrder() {
		t.Errorf("Stable shuffled sorted %d ints (stability)", n)
	}

//line sort_test.go2:646
 for i := 0; i < len(data); i++ {
		data[i].a = len(data) - i
	}
				data.initB()
//line sort_test.go2:649
 instantiate୦୦Stable୦sort2୮aintPairs(data)
//line sort_test.go2:651
 if !instantiate୦୦IsSorted୦sort2୮aintPairs(data) {
		t.Errorf("Stable didn't sort %d ints", n)
	}
	if !data.inOrder() {
		t.Errorf("Stable wasn't stable on %d ints", n)
	}
}

var countOpsSizes = []int{1e2, 3e2, 1e3, 3e3, 1e4, 3e4, 1e5, 3e5, 1e6}

func countOps(t *testing.T, algo func(*testingData), name string) {
	sizes := countOpsSizes
	if testing.Short() {
		sizes = sizes[:5]
	}
	if !testing.Verbose() {
		t.Skip("Counting skipped as non-verbose mode.")
	}
	for _, n := range sizes {
		td := testingData{
			desc:    name,
			t:       t,
			data:    make([]int, n),
			maxswap: 1<<31 - 1,
		}
		for i := 0; i < n; i++ {
			td.data[i] = rand.Intn(n / 5)
		}
		algo(&td)
		t.Logf("%s %8d elements: %11d Swap, %10d Less", name, n, td.nswap, td.ncmp)
	}
}

func TestCountStableOps(t *testing.T) {
//line sort_test.go2:684
 countOps(t, instantiate୦୦Stable୦୮1sort2୮atestingData, "Stable")
//line sort_test.go2:684
}
func TestCountSortOps(t *testing.T) {
//line sort_test.go2:685
 countOps(t, instantiate୦୦Sort୦୮1sort2୮atestingData, "Sort  ")
//line sort_test.go2:685
}

func bench(b *testing.B, size int, algo func(intPairs), name string) {
	b.StopTimer()
	data := make(intPairs, size)
	x := ^uint32(0)
	for i := 0; i < b.N; i++ {
		for n := size - 3; n <= size+3; n++ {
			for i := 0; i < len(data); i++ {
				x += x
				x ^= 1
				if int32(x) < 0 {
					x ^= 0x88888eef
				}
				data[i].a = int(x % uint32(n/5))
			}
			data.initB()
			b.StartTimer()
			algo(data)
			b.StopTimer()
			if !instantiate୦୦IsSorted୦sort2୮aintPairs(data) {
				b.Errorf("%s did not sort %d ints", name, n)
			}
			if name == "Stable" && !data.inOrder() {
				b.Errorf("%s unstable on %d ints", name, n)
			}
		}
	}
}

func BenchmarkSort1e2(b *testing.B) { bench(b, 1e2, instantiate୦୦Sort୦sort2୮aintPairs, "Sort") }
func BenchmarkStable1e2(b *testing.B) {
//line sort_test.go2:716
 bench(b, 1e2, instantiate୦୦Stable୦sort2୮aintPairs, "Stable")
//line sort_test.go2:716
}
func BenchmarkSort1e4(b *testing.B) { bench(b, 1e4, instantiate୦୦Sort୦sort2୮aintPairs, "Sort") }
func BenchmarkStable1e4(b *testing.B) {
//line sort_test.go2:718
 bench(b, 1e4, instantiate୦୦Stable୦sort2୮aintPairs, "Stable")
//line sort_test.go2:718
}
func BenchmarkSort1e6(b *testing.B) { bench(b, 1e6, instantiate୦୦Sort୦sort2୮aintPairs, "Sort") }
func BenchmarkStable1e6(b *testing.B) {
//line sort_test.go2:720
 bench(b, 1e6, instantiate୦୦Stable୦sort2୮aintPairs, "Stable")
//line sort_test.go2:720
}
//line slice.go2:19
func instantiate୦୦Slice୦string(slice [](string), less func(i, j int) bool) {
			length := len(slice)
//line slice.go2:20
 instantiate୦୦quickSort୦sort2୮agenericSlice୮8string୮9(instantiate୦୦genericSlice୦string{slice, less}, 0, length, instantiate୦୦maxDepth୦string(length))
//line slice.go2:22
}

//line slice.go2:31
func instantiate୦୦SliceIsSorted୦string(slice [](string), less func(i, j int) bool) bool {
	n := len(slice)
	for i := n - 1; i > 0; i-- {
		if less(i, i-1) {
			return false
		}
	}
	return true
}

//line sort.go2:219
func instantiate୦୦Sort୦sort2୮aInterface(data (Interface),) {
			n := data.Len()
//line sort.go2:220
 instantiate୦୦quickSort୦sort2୮aInterface(data, 0, n, instantiate୦୦maxDepth୦sort2୮aInterface(n))
//line sort.go2:222
}

//line sort.go2:246
func instantiate୦୦Reverse୦sort2୮aIntSlice(data (IntSlice),) Interface {
	return &instantiate୦୦reverse୦sort2୮aIntSlice{data}
}
//line sort.go2:219
func instantiate୦୦Sort୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData),) {
			n := data.Len()
//line sort.go2:220
 instantiate୦୦quickSort୦୮1sort2୮anonDeterministicTestingData(data, 0, n, instantiate୦୦maxDepth୦୮1sort2୮anonDeterministicTestingData(n))
//line sort.go2:222
}
//line slice.go2:56
func instantiate୦୦SortableSlice୦sort2୮asortableString(slice [](sortableString),) {
			length := len(slice)
//line slice.go2:57
 instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(instantiate୦୦sortableSlice୦sort2୮asortableString(slice), 0, length, instantiate୦୦maxDepth୦sort2୮asortableString(length))
//line slice.go2:59
}

//line sort.go2:351
func instantiate୦୦Stable୦sort2୮aStringSlice(data (StringSlice),) {
//line sort.go2:351
 instantiate୦୦stable୦sort2୮aStringSlice(data, data.Len())
//line sort.go2:353
}
//line sort.go2:351
func instantiate୦୦Stable୦sort2୮aIntSlice(data (IntSlice),) {
//line sort.go2:351
 instantiate୦୦stable୦sort2୮aIntSlice(data, data.Len())
//line sort.go2:353
}
//line slice.go2:26
func instantiate୦୦SliceStable୦int(slice [](int), less func(i, j int) bool) {
//line slice.go2:26
 instantiate୦୦stable୦sort2୮agenericSlice୮8int୮9(instantiate୦୦genericSlice୦int{slice, less}, len(slice))
//line slice.go2:28
}

//line slice.go2:64
func instantiate୦୦SortableSliceStable୦sort2୮asortableInt(slice [](sortableInt),) {
//line slice.go2:64
 instantiate୦୦stable୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(instantiate୦୦sortableSlice୦sort2୮asortableInt(slice), len(slice))
//line slice.go2:66
}
//line slice.go2:19
func instantiate୦୦Slice୦int(slice [](int), less func(i, j int) bool) {
			length := len(slice)
//line slice.go2:20
 instantiate୦୦quickSort୦sort2୮agenericSlice୮8int୮9(instantiate୦୦genericSlice୦int{slice, less}, 0, length, instantiate୦୦maxDepth୦int(length))
//line slice.go2:22
}

//line slice.go2:56
func instantiate୦୦SortableSlice୦sort2୮asortableInt(slice [](sortableInt),) {
			length := len(slice)
//line slice.go2:57
 instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(instantiate୦୦sortableSlice୦sort2୮asortableInt(slice), 0, length, instantiate୦୦maxDepth୦sort2୮asortableInt(length))
//line slice.go2:59
}

//line sort.go2:219
func instantiate୦୦Sort୦୮1sort2୮atestingData(data *testingData) {
			n := data.Len()
//line sort.go2:220
 instantiate୦୦quickSort୦୮1sort2୮atestingData(data, 0, n, instantiate୦୦maxDepth୦୮1sort2୮atestingData(n))
//line sort.go2:222
}
//line export_test.go2:7
func instantiate୦୦Heapsort୦୮1sort2୮atestingData(data *testingData) {
//line export_test.go2:7
 instantiate୦୦heapSort୦୮1sort2୮atestingData(data, 0, data.Len())
//line export_test.go2:9
}

//line sort.go2:351
func instantiate୦୦Stable୦୮1sort2୮atestingData(data *testingData) {
//line sort.go2:351
 instantiate୦୦stable୦୮1sort2୮atestingData(data, data.Len())
//line sort.go2:353
}
//line sort.go2:219
func instantiate୦୦Sort୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData),) {
			n := data.Len()
//line sort.go2:220
 instantiate୦୦quickSort୦୮1sort2୮aadversaryTestingData(data, 0, n, instantiate୦୦maxDepth୦୮1sort2୮aadversaryTestingData(n))
//line sort.go2:222
}

//line sort.go2:251
func instantiate୦୦IsSorted୦sort2୮aintPairs(data (intPairs),) bool {
	n := data.Len()
	for i := n - 1; i > 0; i-- {
		if data.Less(i, i-1) {
			return false
		}
	}
	return true
}

//line sort.go2:351
func instantiate୦୦Stable୦sort2୮aintPairs(data (intPairs),) {
//line sort.go2:351
 instantiate୦୦stable୦sort2୮aintPairs(data, data.Len())
//line sort.go2:353
}
//line sort.go2:219
func instantiate୦୦Sort୦sort2୮aintPairs(data intPairs) {
			n := data.Len()
//line sort.go2:220
 instantiate୦୦quickSort୦sort2୮aintPairs(data, 0, n, instantiate୦୦maxDepth୦sort2୮aintPairs(n))
//line sort.go2:222
}

//line sort.go2:222
type instantiate୦୦genericSlice୦string struct {
//line slice.go2:8
 slice [](string)
			less  func(i, j int) bool
}

func (s instantiate୦୦genericSlice୦string,) Less(i, j int) bool { return s.less(i, j) }
func (s instantiate୦୦genericSlice୦string,) Swap(i, j int) {
//line slice.go2:13
 s.slice[i], s.slice[j] = s.slice[j], s.slice[i]
//line slice.go2:13
}

//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮agenericSlice୮8string୮9(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮agenericSlice୮8string୮9(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮agenericSlice୮8string୮9(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮agenericSlice୮8string୮9(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮agenericSlice୮8string୮9(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦string(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}
//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮aInterface(data (Interface), a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮aInterface(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮aInterface(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮aInterface(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮aInterface(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮aInterface(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦sort2୮aInterface(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}

//line sort.go2:232
type instantiate୦୦reverse୦sort2୮aIntSlice struct {
//line sort.go2:237
 Interface
}

//line sort.go2:241
func (r instantiate୦୦reverse୦sort2୮aIntSlice,) Less(i, j int) bool {
	return r.Interface.Less(j, i)
}
//line sort.go2:186
func instantiate୦୦quickSort୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦୮1sort2୮anonDeterministicTestingData(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦୮1sort2୮anonDeterministicTestingData(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦୮1sort2୮anonDeterministicTestingData(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦୮1sort2୮anonDeterministicTestingData(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦୮1sort2୮anonDeterministicTestingData(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦୮1sort2୮anonDeterministicTestingData(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}

//line sort.go2:232
type instantiate୦୦sortableSlice୦sort2୮asortableString [](sortableString)

//line slice.go2:48
func (s instantiate୦୦sortableSlice୦sort2୮asortableString,) Less(i, j int) bool {
//line slice.go2:48
 return s[i].Less(s[j])
//line slice.go2:48
}
func (s instantiate୦୦sortableSlice୦sort2୮asortableString,) Swap(i, j int) {
//line slice.go2:49
 s[i], s[j] = s[j], s[i]
//line slice.go2:49
}

//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦sort2୮asortableString(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}

//line sort.go2:355
func instantiate୦୦stable୦sort2୮aStringSlice(data (StringSlice), n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦sort2୮aStringSlice(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦sort2୮aStringSlice(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦sort2୮aStringSlice(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦sort2୮aStringSlice(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}
//line sort.go2:355
func instantiate୦୦stable୦sort2୮aIntSlice(data (IntSlice), n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦sort2୮aIntSlice(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦sort2୮aIntSlice(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦sort2୮aIntSlice(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦sort2୮aIntSlice(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}

//line sort.go2:377
type instantiate୦୦genericSlice୦int struct {
//line slice.go2:8
 slice [](int)
			less  func(i, j int) bool
}

func (s instantiate୦୦genericSlice୦int,) Less(i, j int) bool { return s.less(i, j) }
func (s instantiate୦୦genericSlice୦int,) Swap(i, j int) {
//line slice.go2:13
 s.slice[i], s.slice[j] = s.slice[j], s.slice[i]
//line slice.go2:13
}

//line sort.go2:355
func instantiate୦୦stable୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦sort2୮agenericSlice୮8int୮9(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦sort2୮agenericSlice୮8int୮9(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦sort2୮agenericSlice୮8int୮9(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦sort2୮agenericSlice୮8int୮9(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}

//line sort.go2:377
type instantiate୦୦sortableSlice୦sort2୮asortableInt [](sortableInt)

//line slice.go2:48
func (s instantiate୦୦sortableSlice୦sort2୮asortableInt,) Less(i, j int) bool {
//line slice.go2:48
 return s[i].Less(s[j])
//line slice.go2:48
}
func (s instantiate୦୦sortableSlice୦sort2୮asortableInt,) Swap(i, j int) {
//line slice.go2:49
 s[i], s[j] = s[j], s[i]
//line slice.go2:49
}

//line sort.go2:355
func instantiate୦୦stable୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}
//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮agenericSlice୮8int୮9(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮agenericSlice୮8int୮9(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮agenericSlice୮8int୮9(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮agenericSlice୮8int୮9(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮agenericSlice୮8int୮9(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦int(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}
//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦sort2୮asortableInt(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}
//line sort.go2:186
func instantiate୦୦quickSort୦୮1sort2୮atestingData(data (*testingData), a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦୮1sort2୮atestingData(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦୮1sort2୮atestingData(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦୮1sort2୮atestingData(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦୮1sort2୮atestingData(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦୮1sort2୮atestingData(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦୮1sort2୮atestingData(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}
//line sort.go2:56
func instantiate୦୦heapSort୦୮1sort2୮atestingData(data (*testingData), a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦୮1sort2୮atestingData(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦୮1sort2୮atestingData(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:355
func instantiate୦୦stable୦୮1sort2୮atestingData(data (*testingData), n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦୮1sort2୮atestingData(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦୮1sort2୮atestingData(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦୮1sort2୮atestingData(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦୮1sort2୮atestingData(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}
//line sort.go2:186
func instantiate୦୦quickSort୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦୮1sort2୮aadversaryTestingData(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦୮1sort2୮aadversaryTestingData(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦୮1sort2୮aadversaryTestingData(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦୮1sort2୮aadversaryTestingData(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦୮1sort2୮aadversaryTestingData(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦୮1sort2୮aadversaryTestingData(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}

//line sort.go2:355
func instantiate୦୦stable୦sort2୮aintPairs(data (intPairs), n int) {
	blockSize := 20
	a, b := 0, blockSize
	for b <= n {
//line sort.go2:358
  instantiate୦୦insertionSort୦sort2୮aintPairs(data, a, b)
//line sort.go2:360
  a = b
		b += blockSize
	}
//line sort.go2:362
 instantiate୦୦insertionSort୦sort2୮aintPairs(data, a, n)

//line sort.go2:365
 for blockSize < n {
		a, b = 0, 2*blockSize
		for b <= n {
//line sort.go2:367
   instantiate୦୦symMerge୦sort2୮aintPairs(data, a, a+blockSize, b)
//line sort.go2:369
   a = b
			b += 2 * blockSize
		}
		if m := a + blockSize; m < n {
//line sort.go2:372
   instantiate୦୦symMerge୦sort2୮aintPairs(data, a, m, n)
//line sort.go2:374
  }
		blockSize *= 2
	}
}
//line sort.go2:186
func instantiate୦୦quickSort୦sort2୮aintPairs(data (intPairs), a, b, maxDepth int) {
	for b-a > 12 {
		if maxDepth == 0 {
//line sort.go2:188
   instantiate୦୦heapSort୦sort2୮aintPairs(data, a, b)
//line sort.go2:190
   return
		}
				maxDepth--
				mlo, mhi := instantiate୦୦doPivot୦sort2୮aintPairs(data, a, b)

//line sort.go2:196
  if mlo-a < b-mhi {
//line sort.go2:196
   instantiate୦୦quickSort୦sort2୮aintPairs(data, a, mlo, maxDepth)
//line sort.go2:198
   a = mhi
		} else {
//line sort.go2:199
   instantiate୦୦quickSort୦sort2୮aintPairs(data, mhi, b, maxDepth)
//line sort.go2:201
   b = mlo
		}
	}
	if b-a > 1 {

//line sort.go2:207
  for i := a + 6; i < b; i++ {
			if data.Less(i, i-6) {
				data.Swap(i, i-6)
			}
		}
//line sort.go2:211
  instantiate୦୦insertionSort୦sort2୮aintPairs(data, a, b)
//line sort.go2:213
 }
}

//line sort.go2:226
func instantiate୦୦maxDepth୦sort2୮aintPairs(n int) int {
	var depth int
	for i := n; i > 0; i >>= 1 {
		depth++
	}
	return depth * 2
}
//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮agenericSlice୮8string୮9(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮agenericSlice୮8string୮9(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8string୮9(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8string୮9(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8string୮9(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8string୮9(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮aInterface(data (Interface), a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮aInterface(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮aInterface(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮aInterface(data (Interface), lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮aInterface(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮aInterface(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮aInterface(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮aInterface(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮aInterface(data (Interface), a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:56
func instantiate୦୦heapSort୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦୮1sort2୮anonDeterministicTestingData(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦୮1sort2୮anonDeterministicTestingData(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦୮1sort2୮anonDeterministicTestingData(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦୮1sort2୮anonDeterministicTestingData(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦୮1sort2୮anonDeterministicTestingData(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦୮1sort2୮anonDeterministicTestingData(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:398
func instantiate୦୦symMerge୦sort2୮aStringSlice(data (StringSlice), a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦sort2୮aStringSlice(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦sort2୮aStringSlice(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦sort2୮aStringSlice(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:398
func instantiate୦୦symMerge୦sort2୮aIntSlice(data (IntSlice), a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦sort2୮aIntSlice(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦sort2୮aIntSlice(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦sort2୮aIntSlice(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:398
func instantiate୦୦symMerge୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦sort2୮agenericSlice୮8int୮9(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦sort2୮agenericSlice୮8int୮9(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦sort2୮agenericSlice୮8int୮9(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:398
func instantiate୦୦symMerge୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮agenericSlice୮8int୮9(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮agenericSlice୮8int୮9(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8int୮9(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8int୮9(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8int୮9(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8int୮9(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:99
func instantiate୦୦doPivot୦୮1sort2୮atestingData(data (*testingData), lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦୮1sort2୮atestingData(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦୮1sort2୮atestingData(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦୮1sort2୮atestingData(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦୮1sort2୮atestingData(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦୮1sort2୮atestingData(data (*testingData), a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:38
func instantiate୦୦siftDown୦୮1sort2୮atestingData(data (*testingData), lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:398
func instantiate୦୦symMerge୦୮1sort2୮atestingData(data (*testingData), a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦୮1sort2୮atestingData(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦୮1sort2୮atestingData(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦୮1sort2୮atestingData(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:56
func instantiate୦୦heapSort୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦୮1sort2୮aadversaryTestingData(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦୮1sort2୮aadversaryTestingData(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦୮1sort2୮aadversaryTestingData(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦୮1sort2୮aadversaryTestingData(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦୮1sort2୮aadversaryTestingData(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦୮1sort2୮aadversaryTestingData(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:28
func instantiate୦୦insertionSort୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}
//line sort.go2:28
func instantiate୦୦insertionSort୦sort2୮aintPairs(data (intPairs), a, b int) {
	for i := a + 1; i < b; i++ {
		for j := i; j > a && data.Less(j, j-1); j-- {
			data.Swap(j, j-1)
		}
	}
}

//line sort.go2:398
func instantiate୦୦symMerge୦sort2୮aintPairs(data (intPairs), a, m, b int) {

//line sort.go2:402
 if m-a == 1 {

//line sort.go2:406
  i := m
		j := b
		for i < j {
			h := int(uint(i+j) >> 1)
			if data.Less(h, a) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := a; k < i-1; k++ {
			data.Swap(k, k+1)
		}
		return
	}

//line sort.go2:426
 if b-m == 1 {

//line sort.go2:430
  i := a
		j := m
		for i < j {
			h := int(uint(i+j) >> 1)
			if !data.Less(m, h) {
				i = h + 1
			} else {
				j = h
			}
		}

		for k := m; k > i; k-- {
			data.Swap(k, k-1)
		}
		return
	}

	mid := int(uint(a+b) >> 1)
	n := mid + m
	var start, r int
	if m > mid {
		start = n - b
		r = mid
	} else {
		start = a
		r = m
	}
	p := n - 1

	for start < r {
		c := int(uint(start+r) >> 1)
		if !data.Less(p-c, c) {
			start = c + 1
		} else {
			r = c
		}
	}

	end := n - start
	if start < m && m < end {
//line sort.go2:469
  instantiate୦୦rotate୦sort2୮aintPairs(data, start, m, end)
//line sort.go2:471
 }
	if a < start && start < mid {
//line sort.go2:472
  instantiate୦୦symMerge୦sort2୮aintPairs(data, a, start, mid)
//line sort.go2:474
 }
	if mid < end && end < b {
//line sort.go2:475
  instantiate୦୦symMerge୦sort2୮aintPairs(data, mid, end, b)
//line sort.go2:477
 }
}
//line sort.go2:56
func instantiate୦୦heapSort୦sort2୮aintPairs(data (intPairs), a, b int) {
			first := a
			lo := 0
			hi := b - a

//line sort.go2:62
 for i := (hi - 1) / 2; i >= 0; i-- {
//line sort.go2:62
  instantiate୦୦siftDown୦sort2୮aintPairs(data, i, hi, first)
//line sort.go2:64
 }

//line sort.go2:67
 for i := hi - 1; i >= 0; i-- {
				data.Swap(first, first+i)
//line sort.go2:68
  instantiate୦୦siftDown୦sort2୮aintPairs(data, lo, i, first)
//line sort.go2:70
 }
}

//line sort.go2:99
func instantiate୦୦doPivot୦sort2୮aintPairs(data (intPairs), lo, hi int) (midlo, midhi int) {
	m := int(uint(lo+hi) >> 1)
	if hi-lo > 40 {

				s := (hi - lo) / 8
//line sort.go2:103
  instantiate୦୦medianOfThree୦sort2୮aintPairs(data, lo, lo+s, lo+2*s)
				instantiate୦୦medianOfThree୦sort2୮aintPairs(data, m, m-s, m+s)
				instantiate୦୦medianOfThree୦sort2୮aintPairs(data, hi-1, hi-1-s, hi-1-2*s)
//line sort.go2:107
 }
//line sort.go2:107
 instantiate୦୦medianOfThree୦sort2୮aintPairs(data, lo, m, hi-1)

//line sort.go2:117
 pivot := lo
	a, c := lo+1, hi-1

	for ; a < c && data.Less(a, pivot); a++ {
	}
	b := a
	for {
		for ; b < c && !data.Less(pivot, b); b++ {
		}
		for ; b < c && data.Less(pivot, c-1); c-- {
		}
		if b >= c {
			break
		}

		data.Swap(b, c-1)
		b++
		c--
	}

//line sort.go2:138
 protect := hi-c < 5
	if !protect && hi-c < (hi-lo)/4 {

		dups := 0
		if !data.Less(pivot, hi-1) {
			data.Swap(c, hi-1)
			c++
			dups++
		}
		if !data.Less(b-1, pivot) {
			b--
			dups++
		}

//line sort.go2:154
  if !data.Less(m, pivot) {
			data.Swap(m, b-1)
			b--
			dups++
		}

		protect = dups > 1
	}
	if protect {

//line sort.go2:167
  for {
			for ; a < b && !data.Less(b-1, pivot); b-- {
			}
			for ; a < b && data.Less(a, pivot); a++ {
			}
			if a >= b {
				break
			}

			data.Swap(a, b-1)
			a++
			b--
		}
	}

	data.Swap(pivot, b-1)
	return b - 1, c
}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8string୮9(data instantiate୦୦genericSlice୦string, m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮aInterface(data (Interface), lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮aInterface(data (Interface), m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}
//line sort.go2:38
func instantiate୦୦siftDown୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦୮1sort2୮anonDeterministicTestingData(data (*nonDeterministicTestingData), m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableString୮9(data instantiate୦୦sortableSlice୦sort2୮asortableString, m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}

//line sort.go2:484
func instantiate୦୦rotate୦sort2୮aStringSlice(data (StringSlice), a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦sort2୮aStringSlice(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦sort2୮aStringSlice(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦sort2୮aStringSlice(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:484
func instantiate୦୦rotate୦sort2୮aIntSlice(data (IntSlice), a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦sort2୮aIntSlice(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦sort2୮aIntSlice(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦sort2୮aIntSlice(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:484
func instantiate୦୦rotate୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦sort2୮agenericSlice୮8int୮9(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦sort2୮agenericSlice୮8int୮9(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦sort2୮agenericSlice୮8int୮9(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:484
func instantiate୦୦rotate୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}
//line sort.go2:77
func instantiate୦୦medianOfThree୦୮1sort2୮atestingData(data (*testingData), m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}

//line sort.go2:484
func instantiate୦୦rotate୦୮1sort2୮atestingData(data (*testingData), a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦୮1sort2୮atestingData(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦୮1sort2୮atestingData(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦୮1sort2୮atestingData(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:38
func instantiate୦୦siftDown୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦୮1sort2୮aadversaryTestingData(data (*adversaryTestingData), m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}

//line sort.go2:484
func instantiate୦୦rotate୦sort2୮aintPairs(data (intPairs), a, m, b int) {
	i := m - a
	j := b - m

	for i != j {
		if i > j {
//line sort.go2:489
   instantiate୦୦swapRange୦sort2୮aintPairs(data, m-i, m, j)
//line sort.go2:491
   i -= j
		} else {
//line sort.go2:492
   instantiate୦୦swapRange୦sort2୮aintPairs(data, m-i, m+j-i, i)
//line sort.go2:494
   j -= i
		}
	}
//line sort.go2:496
 instantiate୦୦swapRange୦sort2୮aintPairs(data, m-i, m, i)
//line sort.go2:499
}
//line sort.go2:38
func instantiate୦୦siftDown୦sort2୮aintPairs(data (intPairs), lo, hi, first int) {
	root := lo
	for {
		child := 2*root + 1
		if child >= hi {
			break
		}
		if child+1 < hi && data.Less(first+child, first+child+1) {
			child++
		}
		if !data.Less(first+root, first+child) {
			return
		}
		data.Swap(first+root, first+child)
		root = child
	}
}

//line sort.go2:77
func instantiate୦୦medianOfThree୦sort2୮aintPairs(data (intPairs), m1, m0, m2 int) {

	if data.Less(m1, m0) {
		data.Swap(m1, m0)
	}

	if data.Less(m2, m1) {
		data.Swap(m2, m1)

		if data.Less(m1, m0) {
			data.Swap(m1, m0)
		}
	}

}

func instantiate୦୦swapRange୦sort2୮aStringSlice(data (StringSlice), a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}
//line sort.go2:93
func instantiate୦୦swapRange୦sort2୮aIntSlice(data (IntSlice), a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}
//line sort.go2:93
func instantiate୦୦swapRange୦sort2୮agenericSlice୮8int୮9(data instantiate୦୦genericSlice୦int, a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}
//line sort.go2:93
func instantiate୦୦swapRange୦sort2୮asortableSlice୮8sort2୮asortableInt୮9(data instantiate୦୦sortableSlice୦sort2୮asortableInt, a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}
//line sort.go2:93
func instantiate୦୦swapRange୦୮1sort2୮atestingData(data (*testingData), a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}
//line sort.go2:93
func instantiate୦୦swapRange୦sort2୮aintPairs(data (intPairs), a, b, n int) {
	for i := 0; i < n; i++ {
		data.Swap(a+i, b+i)
	}
}

//line sort.go2:97
var _ = fmt.Errorf
//line sort.go2:97
var _ = math.Abs
//line sort.go2:97
var _ = rand.ExpFloat64
//line sort.go2:97
var _ = runtime.BlockProfile
//line sort.go2:97
var _ = strconv.AppendBool
//line sort.go2:97
var _ = testing.AllocsPerRun
